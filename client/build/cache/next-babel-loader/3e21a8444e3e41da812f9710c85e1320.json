{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nimport Link from 'next/link';\nimport { contactForm } from '../../actions/form';\nimport Message from '../message/Message';\nimport './ContactForm.css';\n\nconst ContactForm = ({\n  authorEmail\n}) => {\n  const {\n    0: values,\n    1: setValues\n  } = useState({\n    name: '',\n    email: '',\n    message: '',\n    loading: false,\n    success: false,\n    error: false\n  });\n  const {\n    name,\n    email,\n    message,\n    loading,\n    error,\n    success\n  } = values;\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      loading: true\n    }));\n    contactForm({\n      authorEmail,\n      name,\n      email,\n      message\n    }).then(data => {\n      if (data.error) {\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          error: data.error\n        }));\n      } else {\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          success: true,\n          loading: false,\n          name: \"\",\n          message: \"\",\n          email: \"\"\n        }));\n      }\n    });\n  };\n\n  const handleChange = name => e => {\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      [name]: e.target.value,\n      error: \"\",\n      success: false\n    }));\n  };\n\n  const showForm = () => {\n    return __jsx(React.Fragment, null, showError(), showSuccess(), showLoading(), __jsx(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"form_size mt-5 pb-5\"\n    }, __jsx(\"h3\", {\n      className: \"form_title mb-5\"\n    }, \"Contact Form\"), __jsx(\"div\", {\n      className: \"form-input_flex\"\n    }, __jsx(\"div\", {\n      className: \"form-group\"\n    }, __jsx(\"label\", {\n      className: \"lead\"\n    }, \"Name\"), __jsx(\"input\", {\n      type: \"text\",\n      placeholder: \"your name\",\n      value: name,\n      onChange: handleChange(\"name\"),\n      required: true,\n      className: \"form-control form-input_size\"\n    })), __jsx(\"div\", {\n      className: \"form-group \"\n    }, __jsx(\"label\", {\n      className: \"lead\"\n    }, \"Email\"), __jsx(\"input\", {\n      type: \"email\",\n      placeholder: \"your email address\",\n      value: email,\n      onChange: handleChange(\"email\"),\n      required: true,\n      className: \" form-control form-input_size\"\n    }))), __jsx(\"div\", {\n      className: \"form-group\"\n    }, __jsx(\"label\", {\n      className: \"lead\"\n    }, \"Message\"), __jsx(\"textarea\", {\n      type: \"text\",\n      placeholder: \"your message\",\n      value: message,\n      row: \"10\",\n      onChange: handleChange(\"message\"),\n      required: true,\n      className: \"form-control form_textarea_size\"\n    })), __jsx(\"div\", null, __jsx(\"button\", {\n      className: \"btn btn-primary\"\n    }, \"Send Message\"))));\n  };\n\n  const showError = () => error ? __jsx(Message, {\n    name: error,\n    styles: \"alert-danger\"\n  }) : \"\";\n\n  const showSuccess = () => success ? __jsx(Message, {\n    name: \"Message has been successfully sent\",\n    styles: \"alert-success\"\n  }) : \"\";\n\n  const showLoading = () => loading ? __jsx(Message, {\n    name: \"Loading...\",\n    styles: \"alert-info\"\n  }) : \"\";\n\n  return __jsx(React.Fragment, null, showForm());\n};\n\nexport default ContactForm;","map":null,"metadata":{},"sourceType":"module"}