{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport Head from 'next/head';\nimport Link from 'next/link';\nimport Layout from '../../components/Layout';\nimport { useState, useEffect } from 'react';\nimport { singleBlog, listRelated } from '../../actions/blogAction';\nimport { DOMAIN, API } from '../../config';\nimport ReactHtmlParser from \"react-html-parser\";\nimport moment from 'moment';\nimport SmallCard from '../../components/blog/smallCard';\nimport DisqusThread from '../../components/DisqusThread';\nimport './singleBlog.css';\n\nconst SingleBlog = ({\n  blog,\n  query\n}) => {\n  const {\n    0: related,\n    1: setRelated\n  } = useState([]);\n\n  const loadRelated = () => {\n    listRelated({\n      blog\n    }).then(data => {\n      if (data.error) {\n        console.log(data.error);\n      } else {\n        setRelated(data);\n      }\n    });\n  };\n\n  const showRelatedBlog = () => {\n    return related.map((b, i) => __jsx(\"article\", {\n      key: i\n    }, __jsx(SmallCard, {\n      blog: b\n    })));\n  };\n\n  useEffect(() => {\n    loadRelated();\n  }, []);\n\n  const showBlogCategories = blog => blog.categories.map((c, i) => __jsx(\"div\", {\n    className: \"tags\"\n  }, __jsx(Link, {\n    key: i,\n    href: `/categories/${c.slug}`\n  }, __jsx(\"a\", {\n    className: \"ml-3 mr-1 mt-4\"\n  }, __jsx(\"i\", {\n    class: \"fas fa-receipt\"\n  }), \" \", c.name))));\n\n  const showBlogTags = blog => blog.tags.map((t, i) => __jsx(\"div\", {\n    className: \"tags\"\n  }, __jsx(Link, {\n    key: i,\n    href: `/tags/${t.slug}`\n  }, __jsx(\"a\", {\n    className: \"ml-3 mr-1 mt-4\"\n  }, __jsx(\"i\", {\n    class: \"fas fa-tag\"\n  }), \" \", t.name))));\n\n  const head = () => __jsx(Head, null, __jsx(\"title\", null, `Connect | ${blog.title}`), __jsx(\"meta\", {\n    name: \"description\",\n    content: blog.mdesc\n  }), __jsx(\"link\", {\n    rel: \"canonical\",\n    href: `${DOMAIN}/blogs/${query.slug}`\n  }), __jsx(\"meta\", {\n    property: \"og:title\",\n    content: `Blog App | ${blog.title}`\n  }), __jsx(\"meta\", {\n    property: \"og:description\",\n    content: blog.mdesc\n  }), __jsx(\"meta\", {\n    property: \"og:type\",\n    content: \"website\"\n  }), __jsx(\"meta\", {\n    property: \"og:url\",\n    content: `${DOMAIN}/blogs/${query.slug}`\n  }), __jsx(\"meta\", {\n    property: \"og:image\",\n    content: `${API}/blog/photo/${blog.slug}`\n  }), __jsx(\"meta\", {\n    property: \"og:site_name\",\n    content: \"Blog App\"\n  }), __jsx(\"meta\", {\n    property: \"og:image:secure_url\",\n    content: `${API}/blog/photo/${blog.slug}`\n  }), __jsx(\"meta\", {\n    property: \"og:image:type\",\n    content: \"image/jpg\"\n  }));\n\n  const showComments = () => __jsx(\"div\", null, __jsx(DisqusThread, {\n    id: blog.id,\n    title: blog.title,\n    path: `/blog/${blog.slug}`\n  }));\n\n  return __jsx(React.Fragment, null, head(), __jsx(Layout, null, __jsx(\"main\", {\n    className: \"single-blog-page_container\"\n  }, __jsx(\"article\", null, __jsx(\"div\", {\n    className: \"single-blog-page_image\"\n  }, __jsx(\"img\", {\n    src: `${API}/blog/photo/${blog.slug}`,\n    alt: blog.title\n  })), __jsx(\"section\", null, __jsx(\"h1\", {\n    className: \"single-blog-page_title\"\n  }, blog.title), __jsx(\"p\", {\n    className: \"lead mt-4 mark single-blog-page_written-by\"\n  }, \"Written by \", __jsx(Link, {\n    href: `/profile/${blog.postedBy.username}`\n  }, __jsx(\"a\", null, blog.postedBy.name)), \" | Published At \", moment(blog.updatedAt).format('ll')), __jsx(\"div\", {\n    className: \"single-blog-page_category-tag\"\n  }, showBlogCategories(blog), showBlogTags(blog))), __jsx(\"div\", {\n    className: \"single-blog-page_body\"\n  }, __jsx(\"section\", null, ReactHtmlParser(blog.body))), __jsx(\"div\", {\n    className: \"single-blog-page_related-blog\"\n  }, __jsx(\"h4\", null, \"Related Blogs\"), __jsx(\"hr\", null), showRelatedBlog(), __jsx(\"hr\", null)), __jsx(\"div\", null, showComments())))));\n};\n\nSingleBlog.getInitialProps = ({\n  query\n}) => {\n  return singleBlog(query.slug).then(data => {\n    if (data.error) {\n      console.log(data.error);\n    } else {\n      return {\n        blog: data,\n        query\n      };\n    }\n  });\n};\n\nexport default SingleBlog;","map":null,"metadata":{},"sourceType":"module"}