{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Link from 'next/link';\nimport { useState, useEffect } from 'react';\nimport Router from 'next/router';\nimport dynamic from 'next/dynamic';\nimport { withRouter } from 'next/router';\nimport { getCookie, isAuth } from '../../actions/auth';\nimport { getCategories } from '../../actions/categoryAction';\nimport { getTags } from '../../actions/tagAction';\nimport { singleBlog, updateBlog } from '../../actions/blogAction';\nimport { QuillFormats, QuillModules } from '../../helpers/quillHelpers';\nimport BlogCreate from './BlogCreate';\nconst ReactQuill = dynamic(() => import('react-quill'), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('react-quill')],\n    modules: ['react-quill']\n  }\n});\nimport '../../node_modules/react-quill/dist/quill.snow.css';\n\nconst BlogUpdate = ({\n  router\n}) => {\n  const {\n    0: body,\n    1: setBody\n  } = useState('');\n  const {\n    0: values,\n    1: setValues\n  } = useState({\n    error: '',\n    success: '',\n    formData: '',\n    title: ''\n  });\n  const {\n    0: checkedCategory,\n    1: setCheckedCategory\n  } = useState([]);\n  const {\n    0: checkedTag,\n    1: setCheckedTag\n  } = useState([]);\n  const {\n    0: categories,\n    1: setCategories\n  } = useState([]);\n  const {\n    0: tags,\n    1: setTags\n  } = useState([]);\n  const {\n    error,\n    success,\n    formData,\n    title\n  } = values;\n  const token = getCookie('token');\n  useEffect(() => {\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      formData: new FormData()\n    }));\n    initBlog();\n    initCategories();\n    initTags();\n  }, [router]);\n\n  const initBlog = () => {\n    if (router.query.slug) {\n      singleBlog(router.query.slug).then(data => {\n        if (data.error) {\n          console.log(data.error);\n        } else {\n          setValues(_objectSpread(_objectSpread({}, values), {}, {\n            title: data.title\n          }));\n          setBody(data.body);\n          setCategoriesArray(data.categories);\n          setTagsArray(data.tags);\n        }\n      });\n    }\n  };\n\n  const setCategoriesArray = blogCategories => {\n    let ca = [];\n    blogCategories.map((c, i) => {\n      ca.push(c._id);\n    });\n    setCheckedCategory(ca);\n  };\n\n  const setTagsArray = blogTags => {\n    let ta = [];\n    blogTags.map((t, i) => {\n      ta.push(t._id);\n    });\n    setCheckedTag(ta);\n  };\n\n  const initCategories = () => {\n    getCategories().then(data => {\n      if (data.error) {\n        setCategories(_objectSpread(_objectSpread({}, values), {}, {\n          error: data.error\n        }));\n      } else {\n        setCategories(data);\n      }\n    });\n  };\n\n  const initTags = () => {\n    getTags().then(data => {\n      if (data.error) {\n        setTags(_objectSpread(_objectSpread({}, values), {}, {\n          error: data.error\n        }));\n      } else {\n        setTags(data);\n      }\n    });\n  };\n\n  const handleToggle = c => () => {\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      error: ''\n    }));\n    const checkListCategory = checkedCategory.indexOf(c);\n    const all = [...checkedCategory];\n\n    if (checkListCategory === -1) {\n      all.push(c);\n    } else {\n      all.splice(checkListCategory, 1);\n    }\n\n    console.log(all);\n    setCheckedCategory(all);\n    formData.set('categories', all);\n  };\n\n  const handleTagToggle = t => () => {\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      error: ''\n    }));\n    const checkListTag = checkedTag.indexOf(t);\n    const tagAll = [...checkedTag];\n\n    if (checkListTag === -1) {\n      tagAll.push(t);\n    } else {\n      tagAll.splice(checkListTag, 1);\n    }\n\n    console.log(tagAll);\n    setCheckedTag(tagAll);\n    formData.set('tags', tagAll);\n  };\n\n  const findOutCategories = c => {\n    let result = checkedCategory.indexOf(c);\n\n    if (result !== -1) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  const findOutTags = t => {\n    let result = checkedTag.indexOf(t);\n\n    if (result !== -1) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  const showCategories = () => {\n    return categories && categories.map((c, i) => __jsx(\"li\", {\n      key: i,\n      className: \"list-unstyled\"\n    }, __jsx(\"input\", {\n      checked: findOutCategories(c._id),\n      onChange: handleToggle(c._id),\n      type: \"checkbox\",\n      className: \"mr-2\"\n    }), __jsx(\"label\", {\n      className: \"form-check-label\"\n    }, c.name)));\n  };\n\n  const showTags = () => {\n    return tags && tags.map((t, i) => __jsx(\"li\", {\n      key: i,\n      className: \"list-unstyled\"\n    }, __jsx(\"input\", {\n      checked: findOutTags(t._id),\n      onChange: handleTagToggle(t._id),\n      type: \"checkbox\",\n      className: \"mr-2\"\n    }), __jsx(\"label\", {\n      className: \"form-check-label\"\n    }, t.name)));\n  };\n\n  const handleChange = name => e => {\n    //console.log(e.target.value);\n    const value = name === 'photo' ? e.target.files[0] : e.target.value;\n    formData.set(name, value);\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      [name]: value,\n      formData,\n      error: ''\n    }));\n  };\n\n  const handleBody = e => {\n    setBody(e);\n    formData.set('body', e);\n  };\n\n  const editBody = e => {\n    e.preventDefault();\n    updateBlog(formData, token, router.query.slug).then(data => {\n      if (data.error) {\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          error: data.error\n        }));\n      } else {\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          title: '',\n          success: `Blog Titled '${data.title}' is successfully Created!`\n        }));\n\n        if (isAuth() && isAuth().role === 1) {\n          Router.replace(`/blogs/${router.query.slug}`);\n        } else if (isAuth() && isAuth().role === 0) {\n          Router.replace(`/blogs/${router.query.slug}`);\n        }\n      }\n    });\n  };\n\n  const updateBlogForm = () => {\n    return __jsx(\"form\", {\n      onSubmit: editBody\n    }, __jsx(\"div\", {\n      className: \"form-group\"\n    }, __jsx(\"label\", {\n      className: \"text-muted\"\n    }, \"Title\"), __jsx(\"input\", {\n      type: \"text\",\n      className: \"form-control\",\n      value: title,\n      onChange: handleChange('title')\n    })), __jsx(\"div\", {\n      className: \"form-group\"\n    }, __jsx(ReactQuill, {\n      modules: QuillModules,\n      formats: QuillFormats,\n      value: body,\n      placeholder: \"write something ...\",\n      onChange: handleBody\n    })), __jsx(\"div\", null, __jsx(\"div\", {\n      className: \"pt-3\"\n    }), __jsx(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-primary\"\n    }, \"Update\")));\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"container-fluid\"\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-md-4\"\n  }, __jsx(\"div\", {\n    className: \"form-group pb-2\"\n  }, __jsx(\"h5\", null, \"Featured Image\"), __jsx(\"hr\", null), __jsx(\"small\", {\n    className: \"text-muted mr-5\"\n  }, \"Max Size : 1mb\"), __jsx(\"label\", {\n    className: \"btn btn-info\"\n  }, \"Upload Featured Image\", __jsx(\"input\", {\n    onChange: handleChange('photo'),\n    hidden: true,\n    accept: \"image/*\",\n    type: \"file\"\n  }))), __jsx(\"div\", null, __jsx(\"h5\", null, \"Categories\"), __jsx(\"hr\", null), __jsx(\"ul\", {\n    style: {\n      height: '120px',\n      overflowY: 'scroll'\n    }\n  }, showCategories())), __jsx(\"div\", null, __jsx(\"h5\", {\n    className: \"mt-5\"\n  }, \"Tags\"), __jsx(\"hr\", null), __jsx(\"ul\", {\n    style: {\n      height: '120px',\n      overflowY: 'scroll'\n    }\n  }, showTags()))), __jsx(\"div\", {\n    className: \"col-md-8\"\n  }, __jsx(\"p\", null, \"create blog form\"), updateBlogForm(), __jsx(\"div\", {\n    className: \"pt-3\"\n  })))));\n};\n\nexport default withRouter(BlogUpdate);","map":null,"metadata":{},"sourceType":"module"}