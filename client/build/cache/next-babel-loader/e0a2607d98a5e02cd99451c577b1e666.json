{"ast":null,"code":"import fetch from 'isomorphic-fetch';\nimport { API } from '../config';\nimport queryString from 'query-string';\nimport { isAuth, handleResponse } from './auth';\nexport const createBlog = (blog, token) => {\n  let createBlog;\n\n  if (isAuth() && isAuth().role === 1) {\n    createBlog = `${API}/blog`;\n  } else if (isAuth() && isAuth().role === 0) {\n    createBlog = `${API}/user/blog`;\n  }\n\n  return fetch(`${createBlog}`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      Authorization: `Bearer ${token}`\n    },\n    body: blog\n  }).then(response => {\n    handleResponse(response);\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const listBlog = (skip, limit) => {\n  const data = {\n    limit,\n    skip\n  };\n  return fetch(`${API}/blogs-categories-tags`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const singleBlog = slug => {\n  return fetch(`${API}/blog/${slug}`, {\n    method: 'GET'\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const listRelated = blog => {\n  return fetch(`${API}/blogs/related`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(blog)\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const list = username => {\n  let listBlogs = username;\n\n  if (username) {\n    listBlogs = `${API}/${username}/blogs`;\n  } else {\n    listBlogs = `${API}/blogs`;\n  }\n\n  return fetch(`${listBlogs}`, {\n    method: 'GET'\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const removeBlog = (slug, token) => {\n  let removeBlogBasedOnRole;\n\n  if (isAuth() && isAuth().role === 1) {\n    removeBlogBasedOnRole = `${API}/blog/${slug}`;\n  } else if (isAuth() && isAuth().role === 0) {\n    removeBlogBasedOnRole = `${API}/user/blog/${slug}`;\n  }\n\n  return fetch(`${removeBlogBasedOnRole}`, {\n    method: 'DELETE',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    }\n  }).then(response => {\n    handleResponse(response);\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const updateBlog = (blog, token, slug) => {\n  let UpdateBlogBasedOnRole;\n\n  if (isAuth() && isAuth().role === 1) {\n    UpdateBlogBasedOnRole = `${API}/blog/${slug}`;\n  } else if (isAuth() && isAuth().role === 0) {\n    UpdateBlogBasedOnRole = `${API}/user/blog/${slug}`;\n  }\n\n  return fetch(`${UpdateBlogBasedOnRole}`, {\n    method: 'PUT',\n    headers: {\n      Accept: 'application/json',\n      Authorization: `Bearer ${token}`\n    },\n    body: blog\n  }).then(response => {\n    handleResponse(response);\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const blogSearch = params => {\n  let query = queryString.stringify(params);\n  return fetch(`${API}/blogs/search?${query}`, {\n    method: 'GET'\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};","map":null,"metadata":{},"sourceType":"module"}